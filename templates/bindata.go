// Code generated by go-bindata.
// sources:
// analysis.tmpl
// forkme.tmpl
// homepage.tmpl
// release.tmpl
// token.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _analysisTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x91\x41\x8f\xdb\x20\x10\x85\xef\x91\xf2\x1f\x7c\x03\x2a\x82\x93\x28\x39\x54\x8e\x2b\x25\x6a\xd5\x5b\x7a\x69\x4f\x96\x0f\x53\x3c\x61\x89\x6c\xf0\x02\x5e\x2b\x8a\xf3\xdf\xd7\xd8\xd9\xdd\x0b\x30\x6f\x1e\x9f\xe6\xc1\xc1\x4b\xa7\xdb\xf0\x63\xb9\x48\x12\x7a\xe9\x8c\x0c\xda\x1a\xaa\xb9\xe7\x96\x2b\xee\x38\xf0\x86\xdd\x75\x41\x7e\x5b\xab\x6a\x3c\x1a\xa8\x6f\x41\x4b\xff\xe7\xff\x15\x65\x20\x65\xee\x32\x5d\xb8\x32\x8f\xcb\x30\x7c\xde\x67\xf7\x89\x17\x55\xf1\x9a\xcf\xdb\x30\x14\x25\x13\x6d\xe7\x5f\x28\x38\xd5\x35\x68\x82\x67\x0f\x3e\x35\xeb\x7c\xf3\xcd\x60\x9f\xfc\x84\x80\x94\x65\x90\x7b\x21\x1d\x8e\xc5\xaf\x1a\xa3\x91\x5a\xc6\x23\xb1\x19\x1b\x0a\xc3\x53\xf5\xa7\xdb\x5f\x50\x67\x68\x70\xec\x17\xeb\x32\x03\x01\xfe\x66\x64\xbe\x19\x4f\xde\xc9\x5c\x65\x8d\x68\xc1\x8d\xd6\xb3\xad\x50\x68\xe3\xd1\x85\x13\x5e\xac\x43\x1a\x83\x45\xe4\x83\xd1\x5e\x9b\xca\xf6\xbc\xb2\x72\x9a\x8a\x93\xf9\x4d\x08\x27\x69\xda\xf7\xbd\x50\x53\xf6\x15\x7c\x84\x17\xd2\x36\xe9\x57\x75\xf5\xa3\x53\x01\x61\xd9\x72\x11\x89\x0a\x28\x99\xa7\x27\x3c\x21\xff\x8e\xab\xfd\x7e\xb3\xdd\x6d\xd7\xdf\x57\xbb\x28\x40\x17\xec\xe4\x9d\x9d\x1e\x4d\x15\xe5\x16\x14\xbe\x69\xec\x9f\x98\x43\xfa\xfc\x98\xf7\x00\x00\x00\xff\xff\x6c\x97\x19\x15\xa1\x01\x00\x00")

func analysisTmplBytes() ([]byte, error) {
	return bindataRead(
		_analysisTmpl,
		"analysis.tmpl",
	)
}

func analysisTmpl() (*asset, error) {
	bytes, err := analysisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "analysis.tmpl", size: 417, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _forkmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xdd\xce\x9c\x20\x10\xbd\xef\x53\x10\xef\x3f\x7f\x50\x06\xdd\xbf\xcb\xb6\x6f\xb1\x19\x10\x94\x54\xc1\x00\xa6\xd9\x3e\x7d\x47\x37\xcd\xa6\x99\x10\xce\x0c\xe7\x70\xc8\xe1\x86\x6c\x8e\xc6\xde\x8b\x39\xe7\x2d\x5d\xaa\x6a\x72\x79\xde\x55\xa9\xc3\x5a\x4d\x21\x9a\xc5\x60\x32\x1f\x54\x3c\x6e\x6e\x9d\x58\xca\xaf\xc5\xdc\x8b\x2d\x24\x97\x5d\xf0\x17\x86\x2a\x85\x65\xcf\xe6\xca\x72\xd8\x2e\xac\xbe\xb2\xe8\xa6\x39\x9f\x48\x85\x38\x9a\x78\xc0\x82\xa5\xa8\x3f\x56\x1a\xd7\x50\xbe\xfd\xf6\x64\xa2\x0e\x3e\x1b\x9f\x4f\x6b\x04\x90\x52\xd5\xbd\x1e\x84\x40\xdb\x77\x75\x6d\xbb\x4e\x03\x1f\x7a\xdb\xd5\x46\x8e\xcd\xa0\xb5\x50\x7c\xac\xa0\x97\x1d\x55\x2d\xdb\x16\xb9\xe5\x96\xf6\x96\x1b\x68\x60\x84\x46\x22\x58\x20\x2c\xa5\x3c\x66\x2d\x75\x23\xb7\x20\x61\x90\x1d\xe9\x04\x70\xe2\x73\x18\x80\x53\x11\x93\x58\x16\x00\x8e\x99\x22\xbd\x10\xef\x53\x79\x78\x08\xd2\x51\xd7\xc8\x41\xd8\x16\xa0\xfb\xb7\xb8\x91\x35\x79\xc8\x82\xe1\x92\xef\xc5\xf7\x10\x7f\xb1\xd5\xb0\xe0\xd9\x0f\x97\x7f\xee\xaa\x60\x23\x66\xfc\xd2\xe8\x83\x77\x1a\x97\xaf\xff\x12\x48\x6d\x89\x2b\xfe\x09\x1e\x7f\xa7\x77\xe4\x67\x1a\x55\x74\x4a\x05\x9f\x2a\x4b\xd7\xad\xe6\x79\x66\xf9\x9c\x22\xbe\x9e\xf4\x2e\xaa\x72\xf3\x13\x7d\x45\x85\x8f\x6f\x7f\x03\x00\x00\xff\xff\x34\x10\xde\xf7\xc1\x01\x00\x00")

func forkmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_forkmeTmpl,
		"forkme.tmpl",
	)
}

func forkmeTmpl() (*asset, error) {
	bytes, err := forkmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forkme.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1441899662, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4d\x6f\xd4\x30\x10\x3d\xb7\xbf\x62\xf0\x99\xc6\xa2\x12\x12\xaa\x9c\x5c\x5a\x10\x37\x38\x2c\x42\x1c\x27\xf1\x6c\x62\xc5\x1f\x69\x3c\x29\x8d\x56\xfb\xdf\xb1\x93\xb0\xbb\x6d\x85\xc4\xc9\xf1\xcc\x7b\x33\x6f\xde\x38\xea\xdd\xc3\xb7\xfb\xdd\xaf\xef\x9f\xa1\x63\x67\xab\x6b\x95\x0f\xb0\xe8\xdb\x52\x90\x17\x39\x40\xa8\xab\xeb\x2b\xe5\x88\x11\x9a\x0e\xc7\x48\x5c\x8a\x1f\xbb\x2f\x37\x9f\x44\x8e\xb3\x61\x4b\x55\x1b\x46\xb2\x84\x91\x94\x5c\x03\x29\x63\x8d\xef\x21\x85\x4b\x61\x9a\xe0\x05\x74\x23\xed\x4b\x21\xf7\xf8\x94\xef\xc5\xe0\x5b\xf1\x12\x16\x79\xb6\x14\x3b\x22\x3e\x81\x9b\xe0\x5c\xc2\x36\x31\x66\x2d\x72\x15\xa3\xea\xa0\xe7\x4c\xd5\xe6\x09\x8c\x2e\xc5\x80\x2d\xe5\x5a\x57\xaa\xfb\x70\x29\x25\xdd\x72\x70\xa8\x7e\x92\x4d\x95\xe8\x3d\x44\x22\x50\xb8\x55\xef\x98\x87\x78\x27\x65\x6b\xb8\x9b\xea\x22\x21\x52\x3f\x4d\xb1\x9f\x6b\x3b\x91\x3c\x15\x12\x95\x0e\x8d\x92\x58\xc1\x3e\x8c\xe0\x52\x18\x8c\x4f\x9f\x0e\xd9\x24\x71\x4a\x0e\x4b\x9b\xa4\x26\x9f\x49\xc4\x6d\xf5\x10\x7e\x7b\x1b\x50\x03\x6a\x3d\x52\x8c\x49\xcb\xed\x9a\x1c\xaa\x47\xe3\xcd\x04\x71\xaa\x75\x70\x68\x3c\x78\xcc\xca\xe8\xf9\x0e\x54\x6e\x5f\x69\x7f\xd3\x86\x7a\x32\x56\x7f\x2c\x1e\xeb\xf0\x5c\xb8\x34\xca\x92\xd9\x3a\xe5\x22\x73\x98\xc6\xe4\xda\x10\xde\xd0\x2f\xe6\xff\x37\xa9\x1e\xd1\x37\xdd\x25\xcd\x61\x64\x1a\xdf\x72\x76\x1d\x79\x38\x13\xb5\x89\x0c\xfa\xd5\x74\x60\x22\x64\xf8\xd5\x0b\x6b\x93\xb3\x87\x43\xf1\x35\x44\x3e\x1e\xcf\x66\x5e\xda\xfa\x3f\xa8\xec\xfb\x22\xe5\x2c\xe9\xd4\x45\x72\xe8\xf3\x2b\xbd\xb7\xa6\xe9\x97\x05\x71\x80\x96\x78\xd5\xbb\x24\xff\x2e\x47\x6e\xdb\x39\x1c\x98\xdc\x60\x91\x09\x44\x5a\x61\xef\x48\x40\x71\x3c\xbe\xca\xa0\x47\x3b\x47\x13\xb7\xdc\xc6\x56\x72\x7d\x78\x69\x99\xcb\xcf\xf2\x27\x00\x00\xff\xff\xc9\xd0\x53\x9d\x3d\x03\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 829, mode: os.FileMode(420), modTime: time.Unix(1442277014, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x6f\xe3\x36\x10\x3d\x3b\xbf\x82\xcb\x1a\x5d\x0b\xbb\xa6\xba\x40\x0f\x45\x23\x19\xc8\x26\xfd\x40\x51\xc4\x41\x93\x1e\x7a\x5a\xd0\x12\x2d\x71\x43\x91\x2a\x49\x25\x71\xb5\xfa\xef\x1d\x8a\x94\xe4\xaf\x74\x7b\x88\x45\xcd\xbc\x79\xf3\xc8\x99\x61\x94\xbc\xb9\x59\x5f\x3f\xfc\x75\xf7\x13\x2a\x6d\x25\x56\x17\x89\x7b\x20\x41\x65\x91\x62\x26\xb1\x33\x30\x9a\xaf\x2e\x66\x49\xc5\x2c\x45\x59\x49\xb5\x61\x36\xc5\x7f\x3e\xfc\xbc\xfc\x01\x3b\xbb\xe0\xf2\x11\x69\x26\x52\x6c\xec\x4e\x30\x53\x32\x66\x31\x2a\x35\xdb\xa6\x38\xce\x54\x55\x29\x49\x32\x63\x7a\xac\xe5\x56\xb0\x55\xa1\x00\xce\xa8\x61\x68\x89\xda\x96\xdc\xd2\x8a\x75\x5d\x12\x7b\xe7\x45\x12\xfb\x8c\xc9\x46\xe5\x3b\x17\x94\xf3\x27\xc4\xf3\x14\xd7\xb4\x60\x8e\x65\x96\x94\x1f\x56\x63\x1c\x4a\x4c\x45\x85\x70\x86\x8f\x9a\xca\xac\x74\x54\xde\x04\x4c\x1f\x7a\xbc\x63\xc8\x04\x35\x26\xc5\x9b\x86\x8b\x7c\xc9\xe5\x56\xf5\x54\x20\x89\x6e\x5c\xd6\x59\xbf\xd6\x7e\x01\xab\x72\x95\xab\x67\x29\x14\xcd\x41\x58\x39\x9a\x73\x97\xe7\x46\x5c\xab\x46\xda\x5e\x73\x70\xc1\x4a\x9f\x23\x29\x14\x7a\x62\xda\x70\x25\x8f\x68\x12\x53\x53\xd9\x6f\xab\x50\x01\x81\x57\x8d\x7c\x94\x90\x15\xf4\x83\x13\xe4\xdb\xfc\xbf\xd9\xb7\x4a\x57\xd4\xbe\xca\xec\xdd\x78\x45\x08\xf9\xdf\x94\x4d\x9d\x53\xcb\x8e\x37\x3d\x71\x7a\xff\xd2\xd1\x7e\x55\x2d\x2c\x86\xc3\x4d\x62\xa8\x81\xaf\x9d\x3e\x2e\xc9\x70\xd0\xe6\x6b\x15\xf9\x65\xbd\xbe\x3f\x10\xe6\x4c\x57\x7f\x5c\xff\x7a\x64\x5c\xd7\xe4\x5c\x65\xda\x16\xfa\xa3\x60\x88\xdc\x35\x1b\xd3\x75\x27\x09\xfa\xda\xae\xef\xfb\xb2\xe6\x87\xd6\x2b\xed\xfb\xea\xc0\xee\x57\xb3\x84\x1e\x6f\x04\x23\x38\x23\xba\x0c\x23\x60\x2c\xb5\x26\x6e\xdb\x39\x59\xeb\xa2\xeb\xfa\x95\x6f\xdd\x7e\x39\x34\x6d\x1c\x92\xc7\x63\x3a\x1c\x12\xcc\x3c\x11\xd8\x7f\x87\x51\x03\xfb\xea\x66\x6c\x4d\x3a\xe8\x39\x53\xd8\xb6\x65\x32\xf7\xfb\x3c\x5b\x89\x61\xae\xb6\x4a\x59\xa6\xc3\xe1\xd3\x61\x72\xf1\xaa\x54\x15\x73\x33\x37\x64\xf9\x36\x53\xf5\xee\xf2\x4e\x3d\x33\xcd\x72\xb4\xd9\xa1\x11\x5c\x5a\x5b\x9b\x1f\xe3\xb8\xe0\xb6\x6c\x36\x04\x86\x1e\x06\x3f\x67\xe6\x71\xb7\x11\x0d\x8b\xc7\x79\xc7\xd3\xe8\x07\xd2\x41\xcd\xf8\x34\x99\xe6\xb5\x45\x46\x67\xa0\xe1\xf3\xdf\x0d\xd3\x3b\x52\x71\x49\x3e\x43\x77\x40\xa7\xf5\xde\x13\x1c\x24\xac\x95\x64\x12\xce\xb9\x02\xd1\xd2\x86\xc7\x2b\x51\x2e\xf1\x7c\xb1\x6d\x64\x66\x61\xec\x16\x51\xeb\x76\x37\x5f\x60\x90\x40\xa6\x66\x8c\x48\xc9\x73\xb6\x88\x2e\x9d\xf7\x89\x6a\x34\xf7\xbd\x7f\x65\x51\x8a\x00\xfd\xcd\x34\x0a\x1e\x33\x27\x05\xb3\xbf\xdd\xaf\x6f\x17\x42\x65\xd4\x51\x93\x5a\x2b\xab\x32\x25\xde\xb9\xea\x7d\x74\x57\x8f\xf3\x43\x09\xa3\xbe\x42\xc4\x34\x59\xc6\x8c\x99\xb4\x68\x66\xbc\x1c\x9f\xb2\xa9\x1f\x78\xc5\x20\x5f\xd8\x4f\x23\xf9\x8b\xc3\x10\x9f\xfb\x93\x05\xaf\x4f\xee\xf1\x5b\xad\xaa\x5b\xf5\x0c\x01\x3e\x92\x04\xc3\xe2\x00\xd4\x5f\x0b\x80\x71\x44\xe1\xe5\xcb\x17\x84\xff\xe1\x35\xbe\xbc\xf0\xb8\x71\xaf\xc4\xb2\x17\xbb\x08\x34\x03\x8b\xdb\xfd\x74\x6d\x45\x1e\xe3\xd8\x0a\xf5\x29\x58\xf7\xa1\xe1\x1e\x0a\x38\xff\x16\x8d\x99\x4e\xcf\xdd\x94\x5e\xb1\x07\xc4\x31\x02\x43\x23\x72\x44\x73\xf8\x43\x0e\xc5\x65\x81\x5c\x6b\x8e\x14\x74\x24\x80\xf8\x4c\xf0\xec\xf1\xb8\xbe\x61\xf3\xfd\x34\xba\x39\xea\x8b\x68\x4b\x6e\x22\x42\xad\xd5\xa0\x62\x98\x59\x3c\x68\x9f\x65\x4a\x1a\x25\x18\x11\xaa\x58\x8c\x81\xa3\x77\x4e\x6a\x65\xec\xe4\x78\x8f\xce\x95\xf1\x90\xc5\x39\x86\xf8\x6e\x58\x75\x11\x61\x34\x2b\x5f\x51\xec\x24\x9d\x88\x3d\xd4\xc9\xb7\x28\x1c\x2b\x7a\x93\x22\x8c\xa7\xdc\xce\xe3\xb0\xd0\x69\x1b\x03\x81\xcb\xef\x23\x94\xa6\xe8\x2d\x61\x2f\xec\x6d\x84\x46\xdc\x2c\x64\xd9\xc7\x7e\xf7\xde\xbf\x0a\x26\x0b\x5b\x42\xe4\x00\xee\x2e\x4e\x83\xd0\x3b\x84\x09\x86\x5f\xaf\x63\xdc\xe3\x70\x56\xa7\xea\x3d\xfb\x74\x06\x7e\xd1\x85\xc9\x60\x5a\x2b\x7d\x76\x2e\xe2\x38\xb4\xcc\xde\xbf\xf2\x83\x59\x3d\x3f\xcb\xf0\x59\xb3\xc0\xee\xcb\x61\xb8\x3c\x0d\x92\xca\x22\xfa\x44\x05\x77\x77\x63\xff\xb1\xb0\xd7\x7c\x93\xa8\xfe\x77\xef\x16\x69\x5b\xcb\xaa\x5a\xc0\x78\x20\x4c\x25\x15\x3b\xc3\x0d\x46\x04\x6e\xda\x24\xf6\xdf\x2c\xc0\xd5\x7f\x4c\xfd\x1b\x00\x00\xff\xff\x52\xf3\x33\x89\x5d\x09\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 2397, mode: os.FileMode(420), modTime: time.Unix(1442632780, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tokenTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\xcd\x6e\xd4\x30\x10\x3e\x67\x9f\xc2\x58\x88\x76\x25\x36\x56\x6f\xa8\x75\x82\x10\x6c\x39\x80\xda\xaa\x6c\x0f\x9c\x90\xd7\x99\x26\xee\x3a\x76\xb0\x9d\x42\x14\xe5\xdd\x99\xc4\xfb\x5b\x01\x7b\xc8\x78\x7e\x3d\xf3\xf9\x9b\xe5\xaf\x3e\xdd\x7e\x5c\x7d\xbf\x5b\x92\x2a\xd4\x3a\x9f\xf1\x51\x10\x2d\x4c\x99\x51\x30\x74\x34\x80\x28\xf2\x59\xc2\x6b\x08\x82\xc8\x4a\x38\x0f\x21\xa3\x0f\xab\xeb\xc5\x3b\x3a\xda\xb5\x32\x1b\xe2\x40\x67\xd4\x87\x4e\x83\xaf\x00\x02\x25\x95\x83\xc7\x8c\x32\x69\xeb\xda\x9a\x54\x7a\x3f\xc5\x7a\xe9\x54\x13\x88\x77\x12\x7d\x4f\x3f\x5b\x70\x5d\x5a\x2b\x93\x3e\xa1\x9b\xb3\xe8\x3d\xc4\xe1\xe9\xf5\xf9\x63\x6b\x64\x50\xd6\x9c\xcf\xfb\x59\x82\x7a\x61\x65\x5b\x83\x09\xf3\x14\x6d\x54\x6a\x25\x37\xf4\x2d\xa1\xca\x34\x6d\x48\x27\x75\xe1\x41\x83\x0c\x68\xdd\xe7\xc2\x9c\x8c\xd9\x98\x0e\x69\x10\xae\x04\x4c\x8f\x51\xe7\xf3\x2b\x74\x0c\xe3\x77\xfa\x1c\x77\x11\x54\xd0\x90\x97\x16\x87\x03\xe1\x81\x2c\x48\xdf\xa7\x37\xa2\x86\x61\xe0\x2c\x3a\x67\x9c\x45\x7c\xf8\xda\x16\xdd\x98\x54\xa8\x67\xa2\x8a\x8c\x36\xa2\x04\x9c\x99\x6c\x7f\xbc\xba\xc8\x57\x76\x03\x06\x13\x2e\x30\x2e\xe1\x4d\x4e\x5a\x0f\xee\x72\x2c\xfa\x80\x87\x7d\xe5\xe6\x28\xab\x71\x90\x73\x1f\x9c\x35\x65\xfe\xf9\xf6\x7e\xf9\x75\xf9\xe1\xdb\xf2\xc7\xea\xf6\xcb\xf2\x06\x3b\x8d\x76\xc2\xa7\xe1\x49\xe8\x1a\xc8\x68\x80\xdf\x08\xbf\xd4\xc2\xfb\x8c\x9e\xe0\x41\x9e\x85\x6e\x21\x3b\xc3\xfb\xa6\x4e\x86\xe1\x0c\x41\x1f\x6f\x38\xdc\x87\xdd\x1f\x69\x6c\x52\x93\x84\x6f\x65\xc2\xc5\xee\x61\xc3\x58\xe1\x3d\x9e\x1d\xbe\x78\x16\x5c\x8b\xc3\xde\x47\x8d\x33\x11\x83\x5b\x3d\xc9\xa4\xef\x1d\xf2\x09\x48\x7a\x0f\x8d\xf5\xc3\x30\x19\x91\x37\xd1\x7b\x28\x5a\x85\xd0\xf8\x4b\xc6\x4a\x15\xaa\x76\x9d\x22\x77\x18\xf6\x7a\xdd\x6a\x6d\x26\x68\x68\x1e\x3d\xbb\x0b\xfe\x92\x1a\x9c\x78\x56\x7e\x21\x55\x6a\x5d\x79\x9a\xcd\x90\xb7\x41\x99\x12\xa9\x16\xa3\x4e\xca\x4c\xdc\x45\xc0\xac\xb6\xf8\x24\x6b\x2d\x90\x56\xbb\x59\x5f\x34\x71\xa2\xee\x8b\x70\xb6\x1b\xa8\xef\xc1\x14\x71\x4a\xce\x22\x06\x27\x48\x4e\xf4\x78\xb4\x36\x80\xa3\x2f\x50\xa5\x79\x65\x6b\x18\xa9\xb3\xab\xfb\x46\xda\xa6\xbb\xba\xb3\xbf\xc0\x41\x41\xd6\x1d\xf9\x1f\x5a\xd2\x16\xe0\x37\xdd\x1a\x9f\x99\xed\x69\x4b\x0f\x0c\xde\x16\xdd\x75\xb3\x97\x27\x6b\x89\x85\x1a\x6b\x70\xc3\x3c\xab\xed\xb8\x69\x5b\xf1\xef\x25\x3d\x32\xf6\x7d\x80\xba\xd1\x22\x00\xa1\xc2\x08\xdd\x79\xe5\x29\x49\x11\x0d\xce\xe2\x86\x20\xff\xa7\x3f\x9a\x3f\x01\x00\x00\xff\xff\xa5\x08\xb8\x26\x79\x04\x00\x00")

func tokenTmplBytes() ([]byte, error) {
	return bindataRead(
		_tokenTmpl,
		"token.tmpl",
	)
}

func tokenTmpl() (*asset, error) {
	bytes, err := tokenTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.tmpl", size: 1145, mode: os.FileMode(420), modTime: time.Unix(1442410680, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"analysis.tmpl": analysisTmpl,
	"forkme.tmpl": forkmeTmpl,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
	"token.tmpl": tokenTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"analysis.tmpl": &bintree{analysisTmpl, map[string]*bintree{
	}},
	"forkme.tmpl": &bintree{forkmeTmpl, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
	"token.tmpl": &bintree{tokenTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

