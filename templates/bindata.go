// Code generated by go-bindata.
// sources:
// analysis.tmpl
// forkme.tmpl
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _analysisTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x91\x41\x8f\xdb\x20\x10\x85\xef\x91\xf2\x1f\x7c\x03\x2a\x82\x93\x28\x39\x54\x8e\x2b\x25\x6a\xd5\x5b\x7a\x69\x4f\x96\x0f\x53\x3c\x61\x89\x6c\xf0\x02\x5e\x2b\x8a\xf3\xdf\xd7\xd8\xd9\xdd\x0b\x30\x6f\x1e\x9f\xe6\xc1\xc1\x4b\xa7\xdb\xf0\x63\xb9\x48\x12\x7a\xe9\x8c\x0c\xda\x1a\xaa\xb9\xe7\x96\x2b\xee\x38\xf0\x86\xdd\x75\x41\x7e\x5b\xab\x6a\x3c\x1a\xa8\x6f\x41\x4b\xff\xe7\xff\x15\x65\x20\x65\xee\x32\x5d\xb8\x32\x8f\xcb\x30\x7c\xde\x67\xf7\x89\x17\x55\xf1\x9a\xcf\xdb\x30\x14\x25\x13\x6d\xe7\x5f\x28\x38\xd5\x35\x68\x82\x67\x0f\x3e\x35\xeb\x7c\xf3\xcd\x60\x9f\xfc\x84\x80\x94\x65\x90\x7b\x21\x1d\x8e\xc5\xaf\x1a\xa3\x91\x5a\xc6\x23\xb1\x19\x1b\x0a\xc3\x53\xf5\xa7\xdb\x5f\x50\x67\x68\x70\xec\x17\xeb\x32\x03\x01\xfe\x66\x64\xbe\x19\x4f\xde\xc9\x5c\x65\x8d\x68\xc1\x8d\xd6\xb3\xad\x50\x68\xe3\xd1\x85\x13\x5e\xac\x43\x1a\x83\x45\xe4\x83\xd1\x5e\x9b\xca\xf6\xbc\xb2\x72\x9a\x8a\x93\xf9\x4d\x08\x27\x69\xda\xf7\xbd\x50\x53\xf6\x15\x7c\x84\x17\xd2\x36\xe9\x57\x75\xf5\xa3\x53\x01\x61\xd9\x72\x11\x89\x0a\x28\x99\xa7\x27\x3c\x21\xff\x8e\xab\xfd\x7e\xb3\xdd\x6d\xd7\xdf\x57\xbb\x28\x40\x17\xec\xe4\x9d\x9d\x1e\x4d\x15\xe5\x16\x14\xbe\x69\xec\x9f\x98\x43\xfa\xfc\x98\xf7\x00\x00\x00\xff\xff\x6c\x97\x19\x15\xa1\x01\x00\x00")

func analysisTmplBytes() ([]byte, error) {
	return bindataRead(
		_analysisTmpl,
		"analysis.tmpl",
	)
}

func analysisTmpl() (*asset, error) {
	bytes, err := analysisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "analysis.tmpl", size: 417, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _forkmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xdd\xce\x9c\x20\x10\xbd\xef\x53\x10\xef\x3f\x7f\x50\x06\xdd\xbf\xcb\xb6\x6f\xb1\x19\x10\x94\x54\xc1\x00\xa6\xd9\x3e\x7d\x47\x37\xcd\xa6\x99\x10\xce\x0c\xe7\x70\xc8\xe1\x86\x6c\x8e\xc6\xde\x8b\x39\xe7\x2d\x5d\xaa\x6a\x72\x79\xde\x55\xa9\xc3\x5a\x4d\x21\x9a\xc5\x60\x32\x1f\x54\x3c\x6e\x6e\x9d\x58\xca\xaf\xc5\xdc\x8b\x2d\x24\x97\x5d\xf0\x17\x86\x2a\x85\x65\xcf\xe6\xca\x72\xd8\x2e\xac\xbe\xb2\xe8\xa6\x39\x9f\x48\x85\x38\x9a\x78\xc0\x82\xa5\xa8\x3f\x56\x1a\xd7\x50\xbe\xfd\xf6\x64\xa2\x0e\x3e\x1b\x9f\x4f\x6b\x04\x90\x52\xd5\xbd\x1e\x84\x40\xdb\x77\x75\x6d\xbb\x4e\x03\x1f\x7a\xdb\xd5\x46\x8e\xcd\xa0\xb5\x50\x7c\xac\xa0\x97\x1d\x55\x2d\xdb\x16\xb9\xe5\x96\xf6\x96\x1b\x68\x60\x84\x46\x22\x58\x20\x2c\xa5\x3c\x66\x2d\x75\x23\xb7\x20\x61\x90\x1d\xe9\x04\x70\xe2\x73\x18\x80\x53\x11\x93\x58\x16\x00\x8e\x99\x22\xbd\x10\xef\x53\x79\x78\x08\xd2\x51\xd7\xc8\x41\xd8\x16\xa0\xfb\xb7\xb8\x91\x35\x79\xc8\x82\xe1\x92\xef\xc5\xf7\x10\x7f\xb1\xd5\xb0\xe0\xd9\x0f\x97\x7f\xee\xaa\x60\x23\x66\xfc\xd2\xe8\x83\x77\x1a\x97\xaf\xff\x12\x48\x6d\x89\x2b\xfe\x09\x1e\x7f\xa7\x77\xe4\x67\x1a\x55\x74\x4a\x05\x9f\x2a\x4b\xd7\xad\xe6\x79\x66\xf9\x9c\x22\xbe\x9e\xf4\x2e\xaa\x72\xf3\x13\x7d\x45\x85\x8f\x6f\x7f\x03\x00\x00\xff\xff\x34\x10\xde\xf7\xc1\x01\x00\x00")

func forkmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_forkmeTmpl,
		"forkme.tmpl",
	)
}

func forkmeTmpl() (*asset, error) {
	bytes, err := forkmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forkme.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1441899662, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6f\xd4\x30\x10\x3d\x6f\x7f\xc5\xe0\x33\x8d\x45\x25\x24\x54\x39\xbe\x50\x10\x37\x38\x2c\x42\x1c\x27\xf1\x34\xb6\xd6\x1f\x69\xc6\x81\x46\xab\xfd\xef\xd8\x9b\x88\x2e\x2d\x5c\x38\x39\x79\xe3\x37\xef\xcd\x3c\xab\x57\x77\x9f\xdf\xef\xbf\x7f\xf9\x00\x36\x07\xaf\xaf\x54\x3d\xc0\x63\x1c\x5a\x41\x51\x54\x80\xd0\xe8\xab\x9d\x0a\x94\x11\x7a\x8b\x13\x53\x6e\xc5\xd7\xfd\xc7\xeb\x77\xa2\xe2\xd9\x65\x4f\x7a\x48\x13\x79\x42\x26\x25\x57\xa0\x54\xbc\x8b\x07\x28\x70\x2b\x38\x2f\x9e\xd8\x12\x65\x01\x76\xa2\xfb\x56\xc8\x3e\x85\x90\x62\xd3\x33\x57\x11\xb9\xaa\xa8\x2e\x99\xa5\x52\x8d\xfb\x01\xce\xb4\x62\xc4\x81\xaa\xca\x4e\xd9\x37\x97\x1a\xe5\xaf\x82\xa3\xfe\x46\xbe\x74\xa2\xd7\xc0\x44\xa0\x70\xeb\x6e\x73\x1e\xf9\x56\xca\xc1\x65\x3b\x77\x4d\xb9\x51\xf4\x0c\xf1\x61\xe9\xfc\x4c\xf2\x77\x23\xa1\x4d\xea\x95\x44\x0d\xf7\x69\x82\x50\x60\x70\xb1\x7c\x06\xcc\xae\x98\x53\x72\x3c\xcb\x14\x37\xf5\x2c\x26\x6e\xf4\x5d\xfa\x19\x7d\x42\x03\x68\xcc\x44\xcc\xc5\xcb\xcd\x5a\x1c\xf5\x83\x8b\x6e\x06\x9e\x3b\x93\x02\xba\x08\x11\xab\x33\x7a\xbc\x05\x55\xe5\xb5\x89\xd7\x43\xea\x66\xe7\xcd\xdb\xe6\xa1\x4b\x8f\x4d\x28\xa3\x9c\x2b\x9b\x52\x6d\xb2\xa4\x79\x2a\x5b\x1b\xd3\x0b\xfa\xc5\xfc\xff\x26\x75\x13\xc6\xde\x5e\xd2\x02\x72\xa6\xe9\x25\x67\x6f\x29\xc2\x13\xd1\x38\xce\x60\x9e\x4d\x07\x8e\xa1\x5e\xdf\xfd\xb1\xda\xb2\xd9\xe3\xb1\xf9\x94\x38\x9f\x4e\xf2\x2f\x43\x3d\x2d\x58\xae\xe2\x42\xff\x17\xad\x26\x73\x36\xbb\xe5\x20\xb7\x20\x8e\xc7\x4c\x61\xf4\x98\x09\x44\x49\xeb\x10\x48\x40\x73\x3a\x3d\xab\x60\x44\xbf\xb0\xe3\xad\xb6\xb1\x95\x5c\xdf\x58\xc9\xed\xfc\xe0\x7f\x05\x00\x00\xff\xff\x15\x53\x3f\x6f\x01\x03\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 769, mode: os.FileMode(420), modTime: time.Unix(1441978175, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x6f\xdb\x30\x0c\x3d\xa7\xbf\x42\xd3\x82\x21\xc1\x10\x19\xbd\x0d\xab\x63\xa0\x1f\x5b\x87\x61\x68\x8a\x7e\x1c\x76\x2a\x14\x9b\xb1\xdd\xca\x92\x27\xd1\x6d\x03\x23\xff\x7d\x94\xe5\x38\x49\x57\xec\x62\x09\x8f\xd4\x7b\x14\xf9\xe4\xf8\xc3\xc5\xe2\xfc\xee\xf7\xf5\x37\x56\x60\xa5\x92\xa3\xd8\x2f\x4c\x49\x9d\xcf\x39\x68\xee\x01\x90\x59\x72\x34\x8a\x2b\x40\xc9\xd2\x42\x5a\x07\x38\xe7\xf7\x77\xdf\x67\x5f\xb8\xc7\x55\xa9\x9f\x98\x05\x35\xe7\x0e\xd7\x0a\x5c\x01\x80\x9c\x15\x16\x56\x73\x1e\xa5\xa6\xaa\x8c\x16\xa9\x73\x5d\xae\x4b\x6d\x59\x23\x73\x36\xa5\xd8\xe3\x9f\x06\xec\x5a\x54\xa5\x16\x8f\x14\x8e\xa3\x10\xf5\x79\x58\xa2\x82\x24\x37\x44\x0b\xd2\x01\x9b\xb1\xb6\x15\x57\xb2\x82\xcd\x26\x8e\x42\xf0\x28\x8e\x42\x65\xf1\xd2\x64\x6b\x7f\x28\x2b\x9f\x59\x99\xcd\x79\x2d\x73\xf0\x6a\xa3\xb8\x38\x4e\x86\x73\x2c\x76\x95\x54\xca\x03\x67\x56\xea\xb4\xf0\x54\x01\x22\xa6\xe3\x2e\xdf\x33\xa4\x4a\x3a\x37\xe7\xcb\xa6\x54\xd9\xac\xd4\x2b\xd3\x51\x8d\xe2\xba\x5b\xe8\x0a\x68\x8d\xce\x93\x4b\x43\xa7\xc3\x96\x98\x6b\xa9\x3b\xe9\xdc\x3c\x83\x75\xa5\xa1\xc6\x35\xfa\x49\x9b\x17\x4d\x59\x14\x0c\x14\x51\xfd\x2e\xd5\x7d\x9d\x49\x84\xec\x3d\xbe\xa6\x0b\xcd\x24\xfe\x87\x2f\x8e\xa8\xec\x6e\x83\x72\xe9\x1b\xe3\x43\x68\x7b\x0d\x2c\x92\xcb\xc5\xe2\x96\xba\x56\xec\x23\xa7\x37\xe7\x3f\x0e\xb1\x5f\x34\xc6\x43\x64\x51\x8b\x01\xa0\x4d\x60\x6c\x5b\x6a\x5e\x0e\x4c\xdc\x84\xd1\xb8\xcd\xe6\x8d\x60\xe6\x5b\xbc\xb8\xed\x26\x95\x1d\x80\xa7\x36\x74\xfd\x0d\xec\x95\xdf\xc2\xdd\x66\x14\xcb\xde\x47\x43\x16\x4f\x2e\xa8\x09\xca\x48\x6a\x97\xec\xd3\xb7\x07\xf7\x6a\x04\x9d\x75\x75\x11\xb4\xed\xc9\x60\x8f\x95\x31\x08\xb6\x9f\xea\x56\x20\xe2\x49\x61\x2a\xf0\xd6\xd9\x12\x7f\x4a\x4d\xbd\x3e\xb9\x36\x2f\x60\x21\x63\xcb\x35\x1b\x92\x0b\xc4\xda\x7d\x8d\xa2\xbc\xc4\xa2\x59\x0a\xf2\x38\xf9\x3c\x03\xf7\xb4\x5e\xaa\x06\xa2\xc1\xb6\x7c\xe7\xe0\x9e\x74\x3b\xab\x61\x3d\x78\x10\x44\x54\x1b\x0d\x1a\x5d\x54\x51\x31\x1a\xfb\xe5\x9f\xe7\x31\xec\x46\xe3\xc9\xaa\xd1\x29\x92\xe3\x26\xd3\xd6\x57\xfd\x2c\x2d\x1b\x07\xdb\x9c\x22\x9b\xb3\xf1\x84\x7f\xdc\xb9\x68\x7a\xe2\x73\xc6\x22\x07\xfc\x79\xbb\xb8\x9a\x28\x93\x4a\x7f\x58\xd4\xd6\xa0\x49\x8d\xfa\xec\x5b\x7d\xe6\xbd\xef\xe3\xd4\xef\x69\xd7\x63\xe1\x9a\x34\x05\xe7\x76\x6a\x16\x5c\x10\x0c\x92\x4d\x7d\x57\x56\x40\x7a\x7d\xc5\x8d\x2e\x5f\x7d\x8e\x08\xda\x0f\x48\xd1\x20\x1e\xf2\x57\xd6\x54\x57\xe6\x85\x0e\x84\x93\xa2\x07\x26\xdb\xa4\xe1\x0e\x02\xe1\x15\x27\x7d\x98\xa2\x7d\x98\xae\xb5\x7b\x6c\xd3\x90\xe4\xf5\x72\xf3\xd0\xa3\x3d\xd3\xa6\xbf\x01\x58\x6b\xec\xbb\xf5\x13\x17\x4d\x43\xec\xbd\xf8\xa9\x28\xca\x0c\x26\x03\x83\x5f\xbb\xef\xde\x10\xda\x16\xa1\xaa\x15\xd5\xc8\xb8\xd4\x52\xad\x5d\xe9\x38\x13\x64\xbb\x38\x0a\x7f\x24\xfa\xad\x74\xbf\xd4\xbf\x01\x00\x00\xff\xff\xbf\x06\x67\x6d\x63\x05\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 1379, mode: os.FileMode(420), modTime: time.Unix(1441977974, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"analysis.tmpl": analysisTmpl,
	"forkme.tmpl": forkmeTmpl,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"analysis.tmpl": &bintree{analysisTmpl, map[string]*bintree{
	}},
	"forkme.tmpl": &bintree{forkmeTmpl, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

