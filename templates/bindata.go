// Code generated by go-bindata.
// sources:
// bindata.go
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1441716238, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\x3d\x73\xd4\x30\x10\xad\x2f\xbf\x62\x51\x0d\x16\x49\x01\x4c\x46\x56\x43\xa0\x85\xe2\x18\x86\x72\x6d\x6d\x2c\xcd\xe9\x2b\x92\x0c\x39\x7e\x3d\x92\xed\x80\xe1\x06\x2a\xaa\xb5\x9f\xb4\xef\xbd\x7d\x2b\xf1\xec\xee\xc3\xdb\xe3\x97\x8f\xef\x40\x17\x67\xe5\x95\x68\x05\x2c\xfa\xa9\x67\xe4\x59\x03\x08\x95\xbc\x3a\x08\x47\x05\x61\xd4\x98\x32\x95\x9e\x7d\x3a\xbe\x7f\xf1\x86\x35\xbc\x98\x62\x49\x4e\x21\x91\x25\xcc\x24\xf8\x0a\xd4\x13\x6b\xfc\x09\x2a\xdc\xb3\x5c\xce\x96\xb2\x26\x2a\x0c\x74\xa2\xfb\x9e\xf1\x31\x38\x17\x7c\x37\xe6\xdc\x44\xf8\xaa\x22\x86\xa0\xce\xad\x55\x99\xaf\x60\x54\xcf\x22\x4e\xd4\x54\x0e\x42\x5f\xef\x35\xea\x5f\x03\xa3\xfc\x4c\xb6\x32\xd1\x73\xc8\x44\x20\x70\x63\xd7\xa5\xc4\x7c\xcb\xf9\x64\x8a\x9e\x87\xae\xde\xa8\x7a\x8a\xf2\xe9\x3c\xd8\x99\xf8\x4f\x22\x26\x55\x18\x05\x47\x09\xf7\x21\x81\xab\x30\x18\x5f\x3f\x1d\x16\x53\xcd\x09\x1e\x17\x99\xea\xa6\xd5\x6a\xe2\x46\xde\x85\x6f\xde\x06\x54\x80\x4a\x25\xca\xb9\x7a\xb9\x59\x0f\xa3\x7c\x30\xde\xcc\x90\xe7\x41\x05\x87\xc6\x83\xc7\xe6\x8c\x1e\x6f\x41\x34\x79\xf9\xfa\xd1\xfa\x57\x0f\x9d\xb2\xd7\xdd\xf7\x97\xdd\x64\xab\x33\x1b\x66\xa5\x7c\x73\x28\x16\x8b\x72\xd3\x6c\x74\xe7\x30\xa7\x9a\x5f\x0c\x17\x44\xbb\x24\xfe\xde\x34\x24\xf4\xa3\xde\xb7\x39\xcc\x85\xd2\x65\xcf\x51\x93\x87\x5f\x8d\xca\xe4\x02\xea\x8f\x39\xc1\x64\x68\xd7\x0f\xbf\x85\xdc\x32\x7e\xf2\xd2\x69\x4a\xe1\x34\x63\x8c\x4b\xe0\xff\x1c\x76\xbf\x82\xff\xc3\xc3\x9f\x86\xc3\x75\xaa\x6d\x75\x7c\xdd\xdd\x56\x05\x5f\x1f\x58\x5d\xda\xf2\xda\x7f\x04\x00\x00\xff\xff\x19\xee\xaa\x70\xfe\x02\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 766, mode: os.FileMode(420), modTime: time.Unix(1441715996, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x4d\x4b\x33\x31\x10\xc7\xcf\xdb\x4f\x91\x27\xf7\x36\x14\x1e\x44\x24\xbb\xa0\xad\x2f\x27\x57\xb4\x1e\x3c\x4e\x37\x63\xb3\x98\x97\x92\x44\x6b\x29\xfb\xdd\x4d\xb2\x75\x6d\xc5\x93\xe0\x69\x86\x5f\x26\xff\x99\xcc\x3f\xfc\xdf\xbc\x9e\x2d\x9e\xee\x2e\x89\x0c\x5a\x55\x23\x9e\x02\x51\x60\x56\x25\x45\x43\x13\x40\x10\xd5\xa8\xe0\x1a\x03\x90\x46\x82\xf3\x18\x4a\xfa\xb8\xb8\x1a\x9f\xd2\xc4\x55\x6b\x5e\x88\x43\x55\x52\x1f\xb6\x0a\xbd\x44\x0c\x94\x48\x87\xcf\x25\x65\x8d\xd5\xda\x9a\x49\xe3\x7d\xae\x0d\x6d\x50\x58\xad\x6c\x2c\x47\xf0\x48\xc6\x64\xb7\x9b\xdc\x82\xc6\xae\xe3\xac\x3f\x1c\x71\xd6\x77\xe4\x4b\x2b\xb6\xe9\x92\x68\xdf\x48\x2b\x4a\xba\x86\x15\x26\x95\x82\xcb\x69\x35\xdc\x23\xdc\x6b\x50\x2a\x81\x0b\x07\xa6\x91\x49\xaa\x47\x51\x69\x9a\xeb\x03\x2c\x93\x72\x91\x52\x97\x63\x4c\x64\x75\x5d\xd7\x0f\xb1\xad\x3c\x24\xe7\xf7\xb3\x9b\x63\x56\xaf\x27\x03\x88\x89\xfb\xae\x23\xaa\xb8\x81\xd7\xf7\x78\x24\xbe\x10\x68\x71\xf2\xff\x18\xe5\xa4\xe0\xb0\x5f\x8d\x0c\x61\x7d\xc6\x58\x1c\x7b\x6e\x35\xb4\xa6\xeb\xd8\xb0\x17\x76\xf0\x98\x2c\x3e\xce\x7a\x6c\x78\x34\xad\xe6\x76\x63\x94\x05\xc1\x19\xec\x5b\x7c\x36\xfb\x79\x46\x0d\xcd\x5f\x4d\xc8\x04\xb8\x4d\x6b\x7e\x33\x63\x8c\x7b\x6b\x38\x8b\x36\x27\xf3\x7b\xd7\xa3\x75\xf9\x3b\x7e\x04\x00\x00\xff\xff\xbd\xf4\x2c\xa0\x9f\x02\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 671, mode: os.FileMode(420), modTime: time.Unix(1441716233, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

