// Code generated by go-bindata.
// sources:
// bindata.go
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1441774315, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\xcb\x92\xd4\x20\x14\x5d\xf7\x7c\xc5\x95\xb5\x13\x9c\xa9\xf2\x51\x53\x84\x8d\xa3\x5b\x5d\xb4\x65\xb9\x24\xb9\x77\x02\xd5\x3c\xd2\x3c\xb4\xdb\xaf\x17\x92\x56\xa3\x5d\xee\x5c\x91\x1c\x38\x0f\xce\x45\x3c\x7b\xfc\xf0\x76\xff\xe5\xe3\x3b\xd0\xd9\x59\x79\x23\xda\x02\x56\xf9\xa9\x67\xe4\x59\x03\x48\xa1\xbc\xd9\x09\x47\x59\xc1\xa8\x55\x4c\x94\x7b\xf6\x69\xff\xfe\xf6\x0d\x6b\x78\x36\xd9\x92\x9c\x42\x24\x4b\x2a\x91\xe0\x2b\x50\x77\xac\xf1\x07\xa8\x70\xcf\x52\x3e\x5b\x4a\x9a\x28\x33\xd0\x91\x9e\x7a\xc6\xc7\xe0\x5c\xf0\xdd\x98\x52\x33\xe1\xab\x8b\x18\x02\x9e\x1b\x15\xcd\x57\x30\xd8\xb3\x59\x4d\xd4\x5c\x76\x42\xdf\x6d\x3d\xea\x5f\x03\x67\xf9\x99\x6c\x55\xa2\xe7\x90\x88\x40\xa8\x8b\xba\xce\x79\x4e\x0f\x9c\x4f\x26\xeb\x32\x74\xf5\x44\xf5\x43\x4a\x87\xf3\x60\x0b\xf1\x5f\x42\x4c\x62\x18\x05\x57\x12\x9e\x42\x04\x57\x61\x30\xbe\x7e\x3a\x95\x4d\x0d\x27\xf8\xbc\xd8\xd4\x34\x6d\xad\x21\xee\xe5\x63\xf8\xe6\x6d\x50\x08\x0a\x31\x52\x4a\x35\xcb\xfd\xba\x39\xcb\xa3\xf1\xa6\x40\x2a\x03\x06\xa7\x8c\x07\xaf\x5a\x32\x3a\x3d\x80\x68\xf6\xf2\xf5\xc9\xfa\x57\xc7\x0e\xed\x5d\xf7\xfd\x45\x37\xd9\x9a\xcc\x86\x82\xe8\x5b\x42\xb1\x44\x94\x17\xcf\x26\x77\x0e\x25\xd6\xfe\xe6\x70\x25\xb4\x69\xe2\xdf\xa4\x21\x2a\x3f\xea\x2d\xcd\xa9\x94\x29\x5e\x73\xf6\x9a\x3c\xfc\x26\xa2\x49\x19\xf0\xaf\x7b\x82\x49\xd0\x8e\xef\xfe\x28\xb9\x75\xfc\x33\x4b\xa7\x29\x86\x43\x51\xf3\xbc\x14\x8e\xfe\x76\x0a\x43\x31\x16\x5f\x76\xc7\x21\x9c\x3a\xb7\x29\x9e\xaf\x51\xfe\x87\x46\x1b\xdf\x72\x8f\xcb\xb0\xf8\x3a\xad\xcb\x2a\xf8\xfa\xa4\xea\x98\x96\xf7\xfd\x23\x00\x00\xff\xff\x66\x99\x01\x53\xf0\x02\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 752, mode: os.FileMode(420), modTime: time.Unix(1441774306, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\x4d\x4f\xe3\x30\x10\x86\xcf\xe9\xaf\xf0\xfa\x9e\x5a\xd5\xae\xaa\x6a\xe5\x44\x82\x96\x8f\x13\x41\x50\x0e\x1c\xa7\xf1\x50\x47\xf8\xa3\x8a\x0d\xa5\xaa\xf2\xdf\xb1\x93\x10\x5a\xc4\x05\x01\xa7\x19\xbd\x1e\x3f\xf3\x7a\x34\xe6\x7f\x16\xc5\x7c\x79\x7f\x7d\x46\xa4\xd7\x2a\x1f\xf1\x18\x88\x02\xb3\xce\x28\x1a\x1a\x05\x04\x91\x8f\x12\xae\xd1\x03\x29\x25\xd4\x0e\x7d\x46\xef\x96\xe7\xe9\x8c\x46\x5d\x55\xe6\x91\xd4\xa8\x32\xea\xfc\x4e\xa1\x93\x88\x9e\x12\x59\xe3\x43\x46\x59\x69\xb5\xb6\x66\x5c\x3a\xd7\xd6\xfa\xca\x2b\xcc\xd7\x36\x94\x23\x38\x24\x29\xd9\xef\xc7\x57\xa0\xb1\x69\x38\xeb\x0e\x47\x9c\x75\x1d\xf9\xca\x8a\x5d\xbc\x24\xaa\x67\x52\x89\x8c\x6e\x60\x8d\x91\x92\x70\x39\xc9\x87\x7b\x84\x3b\x0d\x4a\x45\xe1\xb4\x06\x53\xca\x88\xea\xa4\x40\x9a\xb4\xf5\x1e\x56\x91\x9c\xc4\xb4\x6e\x63\x48\x64\x7e\x51\x14\xb7\xa1\xad\x3c\x54\x4e\x6e\xe6\x97\xc7\x5a\xb1\x19\x0f\x42\x48\xea\x8f\x1c\x91\x87\x09\x3c\xbd\x84\x23\xf1\x2e\x81\x16\xd3\x7f\xc7\x52\x9b\x24\x1c\xfa\xd1\x48\xef\x37\xff\x19\x0b\xb6\x17\x56\x43\x65\x9a\x86\x0d\x73\x61\x07\x8f\x61\x2d\x3d\x6d\x81\x6c\x78\x35\xcd\x17\x76\x6b\x94\x05\xc1\x19\xf4\x3d\xde\xba\x7d\x6e\x52\x43\xf9\x6b\x16\x05\xd4\xdb\xca\x7c\xdf\x63\x80\x08\xbb\x75\xc7\xa6\xfe\xce\xa6\x3f\xe3\xb2\xa7\xa7\x01\xf8\x35\x93\x21\xf6\x0b\xc4\x59\x58\xc6\xb8\xa2\xdd\x6e\x86\x05\x6b\x3f\xcd\x6b\x00\x00\x00\xff\xff\x02\xe8\xd9\x26\x45\x03\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 837, mode: os.FileMode(420), modTime: time.Unix(1441774153, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

