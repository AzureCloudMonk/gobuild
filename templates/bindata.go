// Code generated by go-bindata.
// sources:
// bindata.go
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1441767256, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\xbd\x72\xd4\x30\x10\xae\x2f\x4f\xb1\xa8\x06\x8b\xa4\x00\x26\x23\xab\x21\xd0\x42\x71\x0c\x43\xb9\xb6\x36\x96\xe6\xf4\x17\x49\x86\x98\xa7\x47\xb2\x0d\x39\xb8\x81\x8a\x6a\xed\x4f\xfa\x7e\x76\x57\xe2\xd9\xdd\x87\xb7\xc7\x2f\x1f\xdf\x81\x2e\xce\xca\x2b\xd1\x0a\x58\xf4\x53\xcf\xc8\xb3\x06\x10\x2a\x79\x75\x10\x8e\x0a\xc2\xa8\x31\x65\x2a\x3d\xfb\x74\x7c\xff\xe2\x0d\x6b\x78\x31\xc5\x92\x9c\x42\x22\x4b\x98\x49\xf0\x0d\xa8\x27\xd6\xf8\x13\x54\xb8\x67\xb9\x2c\x96\xb2\x26\x2a\x0c\x74\xa2\xfb\x9e\xf1\x31\x38\x17\x7c\x37\xe6\xdc\x4c\xf8\xe6\x22\x86\xa0\x96\x46\x55\xe6\x2b\x18\xd5\xb3\x88\x13\x35\x97\x83\xd0\xd7\xe7\x1e\xf5\xaf\x81\x51\x7e\x26\x5b\x95\xe8\x39\x64\x22\x10\xb8\xab\xeb\x52\x62\xbe\xe5\x7c\x32\x45\xcf\x43\x57\x6f\x54\x3f\x45\xf9\xb4\x0c\x76\x26\xfe\x4b\x88\x49\x15\x46\xc1\x51\xc2\x7d\x48\xe0\x2a\x0c\xc6\xd7\x4f\x87\xc5\xd4\x70\x82\xc7\xd5\xa6\xa6\x69\xb5\x86\xb8\x91\x77\xe1\x9b\xb7\x01\x15\xa0\x52\x89\x72\xae\x59\x6e\xb6\xc3\x28\x1f\x8c\x37\x33\xe4\x79\x50\xc1\xa1\xf1\xe0\xb1\x25\xa3\xc7\x5b\x10\xcd\x5e\xbe\x7e\xb4\xfe\xd5\x43\xa7\xec\x75\xf7\xfd\x65\x37\xd9\x9a\xcc\x86\x59\x29\xdf\x12\x8a\x35\xa2\xdc\x3d\x9b\xdc\x12\xe6\x54\xe7\x17\xc3\x85\xd0\xd9\x24\xfe\x4e\x1a\x12\xfa\x51\x9f\xd3\x1c\xe6\x42\xe9\x92\x73\xd4\xe4\xe1\x89\xa8\x4c\x2e\xa0\xfe\xe8\x13\x4c\x86\x76\xfd\xf0\xdb\x90\xdb\x8c\x7f\x66\xe9\x34\xa5\x70\x9a\x31\xc6\x75\xe0\xff\x6c\xf6\x89\xc5\xb7\x50\x4c\xfe\x57\xb9\xb6\xd3\xb5\xb9\x7d\x83\x7c\x5b\xe1\x5e\x05\xdf\xde\x59\xdd\xdd\xfa\xe8\x7f\x04\x00\x00\xff\xff\x9b\x68\x10\x8d\x05\x03\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 773, mode: os.FileMode(420), modTime: time.Unix(1441765184, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x4d\x4b\x33\x31\x10\xc7\xcf\xdb\x4f\x91\x27\xf7\x36\x14\x1e\x44\x24\xbb\xa0\xad\x2f\x27\x57\xb4\x1e\x3c\x4e\x37\x63\xb3\x98\x97\x92\x44\x6b\x29\xfb\xdd\x4d\xb2\x75\x6d\xc5\x93\xe0\x69\x86\x5f\x26\xff\x99\xcc\x3f\xfc\xdf\xbc\x9e\x2d\x9e\xee\x2e\x89\x0c\x5a\x55\x23\x9e\x02\x51\x60\x56\x25\x45\x43\x13\x40\x10\xd5\xa8\xe0\x1a\x03\x90\x46\x82\xf3\x18\x4a\xfa\xb8\xb8\x1a\x9f\xd2\xc4\x55\x6b\x5e\x88\x43\x55\x52\x1f\xb6\x0a\xbd\x44\x0c\x94\x48\x87\xcf\x25\x65\x8d\xd5\xda\x9a\x49\xe3\x7d\xae\x0d\x6d\x50\x58\xad\x6c\x2c\x47\xf0\x48\xc6\x64\xb7\x9b\xdc\x82\xc6\xae\xe3\xac\x3f\x1c\x71\xd6\x77\xe4\x4b\x2b\xb6\xe9\x92\x68\xdf\x48\x2b\x4a\xba\x86\x15\x26\x95\x82\xcb\x69\x35\xdc\x23\xdc\x6b\x50\x2a\x81\x0b\x07\xa6\x91\x49\xaa\x47\x51\x69\x9a\xeb\x03\x2c\x93\x72\x91\x52\x97\x63\x4c\x64\x75\x5d\xd7\x0f\xb1\xad\x3c\x24\xe7\xf7\xb3\x9b\x63\x56\xaf\x27\x03\x88\x89\xfb\xae\x23\xaa\xb8\x81\xd7\xf7\x78\x24\xbe\x10\x68\x71\xf2\xff\x18\xe5\xa4\xe0\xb0\x5f\x8d\x0c\x61\x7d\xc6\x58\x1c\x7b\x6e\x35\xb4\xa6\xeb\xd8\xb0\x17\x76\xf0\x18\x96\xd5\xc7\x59\x90\x0d\xaf\xa6\xd5\xdc\x6e\x8c\xb2\x20\x38\x83\x7d\x8f\xcf\x6e\x3f\x0f\xa9\xa1\xf9\xb3\x11\x05\xb8\x4d\x6b\x7e\x33\x63\x8c\x7b\x6f\x38\x8b\x3e\x27\xf7\x7b\xdb\xa3\x77\xf9\x3f\x7e\x04\x00\x00\xff\xff\xc9\x45\x1d\xad\xa0\x02\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 672, mode: os.FileMode(420), modTime: time.Unix(1441765174, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

