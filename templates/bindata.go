// Code generated by go-bindata.
// sources:
// bindata.go
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1441715086, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\x31\x73\xe3\x20\x14\x84\x6b\xfb\x57\xbc\xa3\xbe\x13\x67\x17\x77\x37\x1e\x44\x73\x4e\xda\xa4\x70\x26\x93\x12\x89\x67\xc1\x18\x01\x16\x28\xb1\xf2\xeb\x03\x92\x92\x38\xce\x4c\xaa\x54\xd8\x0b\x6f\xf7\xd3\x02\xfb\xb1\xbd\xf9\xbf\x7b\xb8\xbd\x02\x15\x5b\xc3\x97\x2c\x2f\x60\x84\x6d\x4a\x82\x96\x64\x01\x85\xe4\xcb\x05\x6b\x31\x0a\xa8\x95\xe8\x02\xc6\x92\xdc\xed\xae\x7f\xfd\x23\x59\x8f\x3a\x1a\xe4\x8d\xeb\xd0\xa0\x08\xc8\xe8\x24\xa4\x1d\xa3\xed\x01\x92\x5c\x92\x10\x07\x83\x41\x21\x46\x02\xaa\xc3\x7d\x49\x68\xed\xda\xd6\xd9\xa2\x0e\x21\x87\xd0\x29\x85\x55\x4e\x0e\x79\x54\xea\x47\xd0\xb2\x24\x5e\x34\x98\x53\x16\x4c\xad\xce\x33\xd2\xbf\x2c\x7a\x7e\x8f\x26\x39\xe1\x4f\x08\x88\xc0\xc4\xec\xae\x62\xf4\x61\x43\x69\xa3\xa3\xea\xab\x22\x9d\x48\x79\x12\xc3\x61\xa8\x4c\x8f\xf4\xcd\x88\x70\xe9\x6a\x46\x05\x87\xbd\xeb\xa0\x4d\x32\x68\x9b\x7e\xb6\x22\xea\x04\xc7\xa8\x1f\x63\x12\x4d\x5e\x13\xc4\x9a\x6f\xdd\x93\x35\x4e\x48\x10\x52\x76\x18\x42\x62\x59\x4f\x9b\x9e\x1f\xb5\xd5\x3d\x84\xbe\x92\xae\x15\xda\x82\x15\x99\x0c\x4f\x1b\x60\x39\x9e\xff\x3d\x19\xfb\xe7\x58\x48\xb3\x2a\x9e\x7f\x17\x8d\x49\x64\xc6\xf5\x52\xda\x4c\xc8\x46\x44\x3e\x67\x66\xbb\xc1\xf5\x5d\xea\xcf\xbb\x4f\x46\x67\x4d\x5c\x0e\xed\x14\x5a\x78\x9f\x94\x3a\x44\x90\x17\xcc\xa0\x03\xe4\xe3\x8b\x0f\x85\xe5\xbe\x5e\x7d\x0b\x85\x9d\x3b\xf4\xc2\xfb\xb1\xbc\x2f\xc1\xcf\xeb\xfc\x1e\x9f\x7c\x23\xe3\xe7\xcc\xfd\xd3\xe9\x02\xe6\x95\xd1\xe9\x95\xa4\xe6\xc7\x27\xfb\x12\x00\x00\xff\xff\x9a\x08\x57\x6b\xc3\x02\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 707, mode: os.FileMode(420), modTime: time.Unix(1441714971, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x4d\x4f\xbc\x30\x10\xc6\xcf\xf0\x29\xfa\xef\x1d\x9a\x4d\xfe\x31\xc6\x94\x26\x66\xf1\xe5\x24\x46\xd7\x83\xc7\x59\x3a\x6e\x89\x7d\xd9\xd0\x1a\xdd\x6c\xf8\xee\xb6\x80\x28\xa7\x07\x9e\x99\xf9\x75\x9e\x96\xff\xab\x9b\xed\xee\xf5\xf1\x86\xa8\x60\xb4\xc8\x79\x12\xa2\xc1\x1e\x2a\x8a\x96\x26\x03\x41\x8a\x3c\xe3\x06\x03\x90\x56\x41\xef\x31\x54\xf4\x65\x77\x5b\x5c\xd2\xe4\xeb\xce\xbe\x93\x1e\x75\x45\x7d\x38\x69\xf4\x0a\x31\x50\xa2\x7a\x7c\xab\x28\x6b\x9d\x31\xce\x96\xad\xf7\x63\x6f\xe8\x82\x46\x71\x70\xb1\x1d\xc1\x23\x29\xc8\xf9\x5c\x3e\x80\xc1\x61\xe0\x6c\x2a\xe6\x9c\x4d\x27\xf2\xbd\x93\xa7\x34\xa4\x36\xbf\x13\xb1\xb8\x19\x41\xb0\x4f\xbd\x59\xfc\xea\x93\x44\x55\xe2\xae\x69\x9e\x23\x46\xfd\x31\xae\x9f\xb6\xf7\x2b\xab\x39\x96\x3f\xff\x51\xfb\x35\x42\x8a\x18\xe6\xe3\x2b\x16\xe4\xe2\x80\x91\x17\xff\x57\x4e\xd2\x8c\xc3\x1c\x51\x85\x70\xbc\x62\x2c\xe6\xa8\x9d\x81\xce\x0e\x03\x5b\xb6\x65\x23\xae\x18\x11\x6c\x49\x4a\x45\xed\x3e\xad\x76\x20\x39\x83\x89\x3a\xe3\xe7\x8d\xa2\x4c\xf1\x38\x9b\xee\x20\xa6\x1e\x1f\xe7\x3b\x00\x00\xff\xff\xf6\x4d\xbf\x5c\xad\x01\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1441715076, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

