// Code generated by go-bindata.
// sources:
// analysis.tmpl
// forkme.tmpl
// homepage.tmpl
// release.tmpl
// token.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _analysisTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x91\x41\x8f\xdb\x20\x10\x85\xef\x91\xf2\x1f\x7c\x03\x2a\x82\x93\x28\x39\x54\x8e\x2b\x25\x6a\xd5\x5b\x7a\x69\x4f\x96\x0f\x53\x3c\x61\x89\x6c\xf0\x02\x5e\x2b\x8a\xf3\xdf\xd7\xd8\xd9\xdd\x0b\x30\x6f\x1e\x9f\xe6\xc1\xc1\x4b\xa7\xdb\xf0\x63\xb9\x48\x12\x7a\xe9\x8c\x0c\xda\x1a\xaa\xb9\xe7\x96\x2b\xee\x38\xf0\x86\xdd\x75\x41\x7e\x5b\xab\x6a\x3c\x1a\xa8\x6f\x41\x4b\xff\xe7\xff\x15\x65\x20\x65\xee\x32\x5d\xb8\x32\x8f\xcb\x30\x7c\xde\x67\xf7\x89\x17\x55\xf1\x9a\xcf\xdb\x30\x14\x25\x13\x6d\xe7\x5f\x28\x38\xd5\x35\x68\x82\x67\x0f\x3e\x35\xeb\x7c\xf3\xcd\x60\x9f\xfc\x84\x80\x94\x65\x90\x7b\x21\x1d\x8e\xc5\xaf\x1a\xa3\x91\x5a\xc6\x23\xb1\x19\x1b\x0a\xc3\x53\xf5\xa7\xdb\x5f\x50\x67\x68\x70\xec\x17\xeb\x32\x03\x01\xfe\x66\x64\xbe\x19\x4f\xde\xc9\x5c\x65\x8d\x68\xc1\x8d\xd6\xb3\xad\x50\x68\xe3\xd1\x85\x13\x5e\xac\x43\x1a\x83\x45\xe4\x83\xd1\x5e\x9b\xca\xf6\xbc\xb2\x72\x9a\x8a\x93\xf9\x4d\x08\x27\x69\xda\xf7\xbd\x50\x53\xf6\x15\x7c\x84\x17\xd2\x36\xe9\x57\x75\xf5\xa3\x53\x01\x61\xd9\x72\x11\x89\x0a\x28\x99\xa7\x27\x3c\x21\xff\x8e\xab\xfd\x7e\xb3\xdd\x6d\xd7\xdf\x57\xbb\x28\x40\x17\xec\xe4\x9d\x9d\x1e\x4d\x15\xe5\x16\x14\xbe\x69\xec\x9f\x98\x43\xfa\xfc\x98\xf7\x00\x00\x00\xff\xff\x6c\x97\x19\x15\xa1\x01\x00\x00")

func analysisTmplBytes() ([]byte, error) {
	return bindataRead(
		_analysisTmpl,
		"analysis.tmpl",
	)
}

func analysisTmpl() (*asset, error) {
	bytes, err := analysisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "analysis.tmpl", size: 417, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _forkmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xdd\xce\x9c\x20\x10\xbd\xef\x53\x10\xef\x3f\x7f\x50\x06\xdd\xbf\xcb\xb6\x6f\xb1\x19\x10\x94\x54\xc1\x00\xa6\xd9\x3e\x7d\x47\x37\xcd\xa6\x99\x10\xce\x0c\xe7\x70\xc8\xe1\x86\x6c\x8e\xc6\xde\x8b\x39\xe7\x2d\x5d\xaa\x6a\x72\x79\xde\x55\xa9\xc3\x5a\x4d\x21\x9a\xc5\x60\x32\x1f\x54\x3c\x6e\x6e\x9d\x58\xca\xaf\xc5\xdc\x8b\x2d\x24\x97\x5d\xf0\x17\x86\x2a\x85\x65\xcf\xe6\xca\x72\xd8\x2e\xac\xbe\xb2\xe8\xa6\x39\x9f\x48\x85\x38\x9a\x78\xc0\x82\xa5\xa8\x3f\x56\x1a\xd7\x50\xbe\xfd\xf6\x64\xa2\x0e\x3e\x1b\x9f\x4f\x6b\x04\x90\x52\xd5\xbd\x1e\x84\x40\xdb\x77\x75\x6d\xbb\x4e\x03\x1f\x7a\xdb\xd5\x46\x8e\xcd\xa0\xb5\x50\x7c\xac\xa0\x97\x1d\x55\x2d\xdb\x16\xb9\xe5\x96\xf6\x96\x1b\x68\x60\x84\x46\x22\x58\x20\x2c\xa5\x3c\x66\x2d\x75\x23\xb7\x20\x61\x90\x1d\xe9\x04\x70\xe2\x73\x18\x80\x53\x11\x93\x58\x16\x00\x8e\x99\x22\xbd\x10\xef\x53\x79\x78\x08\xd2\x51\xd7\xc8\x41\xd8\x16\xa0\xfb\xb7\xb8\x91\x35\x79\xc8\x82\xe1\x92\xef\xc5\xf7\x10\x7f\xb1\xd5\xb0\xe0\xd9\x0f\x97\x7f\xee\xaa\x60\x23\x66\xfc\xd2\xe8\x83\x77\x1a\x97\xaf\xff\x12\x48\x6d\x89\x2b\xfe\x09\x1e\x7f\xa7\x77\xe4\x67\x1a\x55\x74\x4a\x05\x9f\x2a\x4b\xd7\xad\xe6\x79\x66\xf9\x9c\x22\xbe\x9e\xf4\x2e\xaa\x72\xf3\x13\x7d\x45\x85\x8f\x6f\x7f\x03\x00\x00\xff\xff\x34\x10\xde\xf7\xc1\x01\x00\x00")

func forkmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_forkmeTmpl,
		"forkme.tmpl",
	)
}

func forkmeTmpl() (*asset, error) {
	bytes, err := forkmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forkme.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1441899662, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x4d\x6f\xdb\x30\x0c\x3d\xa7\xbf\x82\xd3\x79\xb5\xb0\x02\x03\x86\x42\xd1\xa5\xdd\xb0\xdb\x76\xc8\x30\xec\x48\x5b\x8c\x2d\x44\x1f\xae\x45\x77\x0d\x82\xfc\xf7\x49\xb6\x97\xa4\xed\x76\xe9\x49\x16\x1f\x1f\xf9\xc8\x27\xab\x77\xf7\xdf\xee\x36\xbf\xbe\x7f\x86\x8e\xbd\xd3\x57\xaa\x1c\xe0\x30\xb4\x6b\x41\x41\x94\x00\xa1\xd1\x57\x2b\xe5\x89\x11\x9a\x0e\x87\x44\xbc\x16\x3f\x36\x5f\xae\x3f\x89\x12\x67\xcb\x8e\x74\x1b\x07\x72\x84\x89\x94\x9c\x03\x19\x71\x36\xec\x20\x87\xd7\xc2\x36\x31\x08\xe8\x06\xda\xae\x85\xdc\xe2\x63\xb9\x57\x7d\x68\xc5\xf3\xb4\xc4\x7b\x47\xa9\x23\xe2\x53\x72\x13\xbd\xcf\xb9\x4d\x4a\x45\x8b\x9c\xc5\xa8\x3a\x9a\x7d\xa1\x1a\xfb\x08\xd6\xac\x45\x8f\x2d\x95\x5a\x2b\xd5\x7d\xb8\x94\x92\x6f\x25\xd8\xeb\x9f\xe4\x72\x25\x7a\x0f\x89\x08\x14\x2e\xd5\x3b\xe6\x3e\xdd\x4a\xd9\x5a\xee\xc6\xba\xca\x19\xb9\x9f\xa1\xb4\xdb\xd7\x6e\x24\x79\x2a\x24\xb4\x89\x8d\x92\xa8\x61\x1b\x07\xf0\x39\x0c\x36\xe4\x4f\x8f\x6c\xb3\x38\x25\xfb\xa9\x4d\x56\x53\xce\x2c\xe2\x46\xdf\xc7\xdf\xc1\x45\x34\x80\xc6\x0c\x94\x52\xd6\x72\x33\x83\xbd\x7e\xb0\xc1\x8e\x90\xc6\xda\x44\x8f\x36\x40\xc0\xa2\x8c\x9e\x6e\x41\x95\xf6\xda\x84\xeb\x36\xd6\xa3\x75\xe6\x63\xf5\x50\xc7\xa7\xca\xe7\x51\x26\x64\xe9\x54\x8a\xec\xe3\x38\xe4\xad\xf5\xf1\x15\xfd\x62\xfe\xff\x93\xea\x01\x43\xd3\x5d\xd2\x3c\x26\xa6\xe1\x35\x67\xd3\x51\x80\x33\xd1\xd8\xc4\x60\x5e\x4c\x07\x36\x41\x49\x5f\x3d\x5b\x6d\xde\xec\xe1\x50\x7d\x8d\x89\x8f\x47\xf9\x8f\xa1\xce\x0b\x96\x73\x73\xa1\xdf\x44\x2b\xce\x4c\x62\xcf\xa2\x4f\x3a\x24\xc7\x5d\x79\xc7\x77\xce\x36\xbb\xc9\x42\x8e\xd0\x12\xcf\x13\x4d\xe0\x5f\xfb\xe4\xe2\xdf\xe1\xc0\xe4\x7b\x87\x4c\x20\xb2\xc9\x3b\x4f\x02\xaa\xe3\xf1\x05\x82\x01\xdd\x3e\xd9\xb4\x60\x0b\x5b\xc9\xf9\x69\x66\xbb\xa7\xdf\xe9\x4f\x00\x00\x00\xff\xff\xfb\x85\xd8\xfa\x5f\x03\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 863, mode: os.FileMode(420), modTime: time.Unix(1442235293, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xdb\x6e\xdb\x38\x10\x7d\x76\xbe\x82\xcb\x35\x16\x36\x16\xa6\x90\xb7\xc5\x46\x16\x90\x4b\x2f\x28\x8a\x38\x48\xd2\x02\x7d\x0a\x68\x71\x2c\x31\xa1\x48\x95\xa4\xec\x18\x86\xff\xbd\x43\x51\x96\x2f\x29\xda\xbe\x48\xc4\x9c\xe1\x39\x87\xc3\x19\xa6\x7f\xdd\xcc\xae\x1f\xbf\xdd\xbd\x23\xa5\xaf\x54\x76\x96\x86\x1f\x51\x5c\x17\x53\x0a\x9a\x86\x00\x70\x91\x9d\x0d\xd2\x0a\x3c\x27\x79\xc9\xad\x03\x3f\xa5\x5f\x1e\xdf\x4f\xfe\xa3\x21\xae\xa4\x7e\x21\x16\xd4\x94\x3a\xbf\x56\xe0\x4a\x00\x4f\x49\x69\x61\x31\xa5\x49\x6e\xaa\xca\x68\x96\x3b\xd7\xe6\xba\xdc\xca\xda\x13\x67\x73\xc4\x9e\xbf\x37\x60\xd7\xac\x92\x9a\x3d\x23\x9c\x26\x11\x0d\x79\x5e\x7a\x05\x59\x61\x90\x16\xb8\x03\x32\x21\x9b\x0d\xbb\xe5\x15\x6c\xb7\x69\x12\xc1\xb3\x34\x89\xce\xd2\xb9\x11\xeb\xb0\x49\xc8\x25\x91\x62\x4a\x6b\x5e\x40\x50\x1b\xa4\xe5\x79\xd6\xef\x23\xa9\xab\xb8\x52\x21\x70\x65\xb9\xce\xcb\x40\x15\x43\xc8\x74\xde\xe6\x07\x86\x5c\x71\xe7\xa6\x74\xde\x48\x25\x26\x52\x2f\x4c\x4b\x85\x96\xf8\x3c\xa8\x0e\xda\xb5\x8d\x0b\x5c\x95\x59\x90\x5b\x4a\x58\xa1\xb1\xb2\x0f\x8b\xa0\x73\x87\xc8\x57\x44\x5a\xd3\xa2\xdb\x9b\xec\x36\x1f\xb3\x08\xb3\xd2\xca\x70\xf1\x96\xe5\x46\x5d\x9b\x46\xfb\x96\xa4\xfc\x35\x49\x61\xc8\x12\xac\x93\x46\x9f\xd0\xa4\xae\xe6\xba\x2d\x4e\x61\xba\x0c\x9a\x35\xfa\x45\xa3\x2a\x56\x01\xc1\xec\xf7\x16\x9b\x5a\x70\x0f\xa7\x0e\xf7\xd4\x11\x9f\x70\xff\x07\xd4\xb8\xd8\xd5\x33\x4d\xb0\xec\xf1\xba\x5a\xec\xa0\xd2\xe9\xde\x48\x99\x7d\x98\xcd\x1e\x0e\x4a\xd0\x46\x2e\xef\xaf\x3f\x1e\xc7\x66\x35\xeb\x03\xbd\xda\x66\x83\x37\x5e\x00\x61\xf7\xb1\x9f\xdc\x76\x7b\x42\xdf\x56\x7a\xf6\x70\x74\x53\x31\x78\x69\x63\xab\x1c\x86\xbb\xd3\xf3\xae\xcb\x31\xeb\x33\x0e\xc1\x76\x4b\xb3\x9b\xfe\x1a\x79\x7f\x62\x71\x6a\x06\xb4\x68\x0d\x1c\x16\x61\xd7\xbc\x0b\x63\x3c\xd8\xae\xe7\x76\x02\x09\xcd\x4a\x53\x41\xe8\xb4\x1d\xf1\x3f\xb9\xa9\xd7\x17\x77\x66\x05\x16\x04\x99\xaf\x49\x9f\x5c\x7a\x5f\xbb\xff\x93\xa4\x90\xbe\x6c\xe6\x0c\x27\x10\xa7\x50\x80\x7b\x59\xcf\x55\x03\x49\x3f\x54\x74\x3f\x5f\x1d\xe9\xee\x26\xfa\xff\xd1\xb8\x22\x51\x6d\x34\x68\xef\x92\x0a\xcd\x68\xdf\xfd\xde\x0c\x6f\xbf\x1a\x0c\x47\x8b\x46\xe7\x1e\xbb\x6d\x34\xde\x04\xd7\x4b\x6e\xc9\x30\xf6\xc9\xa5\x27\x53\x32\x1c\xd1\xbf\xf7\x6d\x33\xbe\x08\x39\x43\x56\x80\xff\xf4\x30\xbb\x1d\x29\x93\xf3\xb0\x99\xd5\xd6\x78\x93\x1b\xf5\x6f\x28\xf5\x55\x98\xcc\x80\x63\xbd\xc7\x6d\x8d\x99\x6b\xf2\x1c\x9c\xdb\xab\x59\x70\x51\x30\x4a\x36\xf5\xa3\xac\x00\xf5\x3a\xc7\x8d\x96\xaf\x21\x87\x45\xed\x27\x8f\x68\x14\x8f\xf9\x0b\x6b\xaa\x5b\xb3\xc2\x0d\x71\x27\xeb\x02\xa3\x5d\x52\x7f\x06\xe6\xe1\xd5\x8f\x3a\x18\xd1\x0e\xc6\x63\xed\x07\x6d\x1c\x93\x82\x5e\x61\x9e\xba\x68\xc7\xb4\xed\x4e\x00\xd6\x1a\xfb\x53\xff\xc8\x85\xb7\xc1\x0e\xde\xa3\x31\x2b\xa5\x80\x51\xcf\x10\xfe\xed\xf7\xe0\x12\x36\x1b\x0f\x55\xad\xd0\x23\xa1\x5c\x73\xb5\x76\xd2\x51\xc2\xb0\xed\xd2\x24\xbe\x97\xf8\xe8\xb5\x0f\xfe\x8f\x00\x00\x00\xff\xff\x0a\x53\x02\x1c\x01\x06\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 1537, mode: os.FileMode(420), modTime: time.Unix(1442147369, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tokenTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x52\xbd\xd2\x9b\x30\x10\xac\x3f\x3f\xc5\x45\x45\xba\x0f\x4d\xba\x4c\x22\xd4\xe4\xa7\x4c\x5c\xd8\x45\x4a\x01\x67\x24\x5b\x3f\x44\x3a\x27\xc3\x30\xbc\x7b\x24\xb0\x21\x99\xd0\x1c\xba\xdd\x5b\x2d\x7b\x88\x37\x9f\xbf\x7f\x3a\xfd\x38\x7e\x01\x4d\xce\xca\x83\x28\x05\xac\xf2\x7d\xcd\xd0\xb3\xd2\x40\xd5\xc9\xc3\x8b\x70\x48\x0a\x5a\xad\x62\x42\xaa\xd9\xf9\xf4\xf5\xf5\x3d\x2b\x7d\x6b\xfc\x0d\x22\xda\x9a\x25\x1a\x2d\x26\x8d\x48\x0c\x74\xc4\x4b\xcd\x78\x1b\x9c\x0b\xbe\x6a\x53\x5a\xb8\xa9\x8d\x66\x20\x48\xb1\xcd\xd8\xf5\xe7\x1d\xe3\x58\x39\xe3\xab\x6b\x86\x05\x5f\xd1\xc2\x23\x43\x16\x65\x1f\xb2\x2c\xaa\x84\xf0\x0a\xd3\x54\x7d\x53\x0e\xe7\x59\xf0\x15\x3c\x08\xbe\x3a\x13\x4d\xe8\xc6\x32\xd4\x99\x5f\x60\xba\x9a\x0d\xaa\xc7\x7c\x1b\x3c\x1e\xa1\xdf\xc9\x53\xb8\xa1\x07\x91\x9c\xb2\x56\xc2\x25\xc4\xa2\x77\x4e\x18\x37\xd1\x4c\xda\x27\x86\x88\x52\xb4\xa1\x43\x99\x69\xcb\x6c\xa1\x2c\x0d\xc1\x0b\xb8\x53\xf3\xa5\x7f\x9d\xf8\x72\x7c\xd9\xbd\x5c\x42\x20\x8c\xe5\xdb\x73\x53\x3d\x53\x61\x52\x07\x87\xc5\xa7\xe0\x6a\xc1\xde\xb6\x61\x18\x3f\x1e\xc3\x6f\x8c\xd8\x41\x33\xc2\x46\xd6\x44\x43\xfa\xc0\x79\x6f\x48\xdf\x9b\x2a\x07\xba\x18\x49\xb7\xb1\xb1\x77\xe4\x5b\x46\x6c\x8f\xeb\x21\xfa\x74\xb3\xd5\x7f\xd2\xcf\x42\x43\xf0\xe8\x29\x71\x97\xcd\x78\x7a\x94\xff\x76\xb1\xbf\xed\xcd\x69\x22\x74\x83\x55\x84\xc0\x94\x57\x76\x4c\x26\x31\xa8\xe6\x39\x6f\x65\x5d\x47\x4e\x74\xf9\x9f\xfe\x04\x00\x00\xff\xff\xef\x7d\xde\x89\x60\x02\x00\x00")

func tokenTmplBytes() ([]byte, error) {
	return bindataRead(
		_tokenTmpl,
		"token.tmpl",
	)
}

func tokenTmpl() (*asset, error) {
	bytes, err := tokenTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1442233553, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"analysis.tmpl": analysisTmpl,
	"forkme.tmpl": forkmeTmpl,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
	"token.tmpl": tokenTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"analysis.tmpl": &bintree{analysisTmpl, map[string]*bintree{
	}},
	"forkme.tmpl": &bintree{forkmeTmpl, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
	"token.tmpl": &bintree{tokenTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

