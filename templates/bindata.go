// Code generated by go-bindata.
// sources:
// analysis.tmpl
// forkme.tmpl
// homepage.tmpl
// release.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _analysisTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x91\x41\x8f\xdb\x20\x10\x85\xef\x91\xf2\x1f\x7c\x03\x2a\x82\x93\x28\x39\x54\x8e\x2b\x25\x6a\xd5\x5b\x7a\x69\x4f\x96\x0f\x53\x3c\x61\x89\x6c\xf0\x02\x5e\x2b\x8a\xf3\xdf\xd7\xd8\xd9\xdd\x0b\x30\x6f\x1e\x9f\xe6\xc1\xc1\x4b\xa7\xdb\xf0\x63\xb9\x48\x12\x7a\xe9\x8c\x0c\xda\x1a\xaa\xb9\xe7\x96\x2b\xee\x38\xf0\x86\xdd\x75\x41\x7e\x5b\xab\x6a\x3c\x1a\xa8\x6f\x41\x4b\xff\xe7\xff\x15\x65\x20\x65\xee\x32\x5d\xb8\x32\x8f\xcb\x30\x7c\xde\x67\xf7\x89\x17\x55\xf1\x9a\xcf\xdb\x30\x14\x25\x13\x6d\xe7\x5f\x28\x38\xd5\x35\x68\x82\x67\x0f\x3e\x35\xeb\x7c\xf3\xcd\x60\x9f\xfc\x84\x80\x94\x65\x90\x7b\x21\x1d\x8e\xc5\xaf\x1a\xa3\x91\x5a\xc6\x23\xb1\x19\x1b\x0a\xc3\x53\xf5\xa7\xdb\x5f\x50\x67\x68\x70\xec\x17\xeb\x32\x03\x01\xfe\x66\x64\xbe\x19\x4f\xde\xc9\x5c\x65\x8d\x68\xc1\x8d\xd6\xb3\xad\x50\x68\xe3\xd1\x85\x13\x5e\xac\x43\x1a\x83\x45\xe4\x83\xd1\x5e\x9b\xca\xf6\xbc\xb2\x72\x9a\x8a\x93\xf9\x4d\x08\x27\x69\xda\xf7\xbd\x50\x53\xf6\x15\x7c\x84\x17\xd2\x36\xe9\x57\x75\xf5\xa3\x53\x01\x61\xd9\x72\x11\x89\x0a\x28\x99\xa7\x27\x3c\x21\xff\x8e\xab\xfd\x7e\xb3\xdd\x6d\xd7\xdf\x57\xbb\x28\x40\x17\xec\xe4\x9d\x9d\x1e\x4d\x15\xe5\x16\x14\xbe\x69\xec\x9f\x98\x43\xfa\xfc\x98\xf7\x00\x00\x00\xff\xff\x6c\x97\x19\x15\xa1\x01\x00\x00")

func analysisTmplBytes() ([]byte, error) {
	return bindataRead(
		_analysisTmpl,
		"analysis.tmpl",
	)
}

func analysisTmpl() (*asset, error) {
	bytes, err := analysisTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "analysis.tmpl", size: 417, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _forkmeTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xdd\xce\x9c\x20\x10\xbd\xef\x53\x10\xef\x3f\x7f\x50\x06\xdd\xbf\xcb\xb6\x6f\xb1\x19\x10\x94\x54\xc1\x00\xa6\xd9\x3e\x7d\x47\x37\xcd\xa6\x99\x10\xce\x0c\xe7\x70\xc8\xe1\x86\x6c\x8e\xc6\xde\x8b\x39\xe7\x2d\x5d\xaa\x6a\x72\x79\xde\x55\xa9\xc3\x5a\x4d\x21\x9a\xc5\x60\x32\x1f\x54\x3c\x6e\x6e\x9d\x58\xca\xaf\xc5\xdc\x8b\x2d\x24\x97\x5d\xf0\x17\x86\x2a\x85\x65\xcf\xe6\xca\x72\xd8\x2e\xac\xbe\xb2\xe8\xa6\x39\x9f\x48\x85\x38\x9a\x78\xc0\x82\xa5\xa8\x3f\x56\x1a\xd7\x50\xbe\xfd\xf6\x64\xa2\x0e\x3e\x1b\x9f\x4f\x6b\x04\x90\x52\xd5\xbd\x1e\x84\x40\xdb\x77\x75\x6d\xbb\x4e\x03\x1f\x7a\xdb\xd5\x46\x8e\xcd\xa0\xb5\x50\x7c\xac\xa0\x97\x1d\x55\x2d\xdb\x16\xb9\xe5\x96\xf6\x96\x1b\x68\x60\x84\x46\x22\x58\x20\x2c\xa5\x3c\x66\x2d\x75\x23\xb7\x20\x61\x90\x1d\xe9\x04\x70\xe2\x73\x18\x80\x53\x11\x93\x58\x16\x00\x8e\x99\x22\xbd\x10\xef\x53\x79\x78\x08\xd2\x51\xd7\xc8\x41\xd8\x16\xa0\xfb\xb7\xb8\x91\x35\x79\xc8\x82\xe1\x92\xef\xc5\xf7\x10\x7f\xb1\xd5\xb0\xe0\xd9\x0f\x97\x7f\xee\xaa\x60\x23\x66\xfc\xd2\xe8\x83\x77\x1a\x97\xaf\xff\x12\x48\x6d\x89\x2b\xfe\x09\x1e\x7f\xa7\x77\xe4\x67\x1a\x55\x74\x4a\x05\x9f\x2a\x4b\xd7\xad\xe6\x79\x66\xf9\x9c\x22\xbe\x9e\xf4\x2e\xaa\x72\xf3\x13\x7d\x45\x85\x8f\x6f\x7f\x03\x00\x00\xff\xff\x34\x10\xde\xf7\xc1\x01\x00\x00")

func forkmeTmplBytes() ([]byte, error) {
	return bindataRead(
		_forkmeTmpl,
		"forkme.tmpl",
	)
}

func forkmeTmpl() (*asset, error) {
	bytes, err := forkmeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forkme.tmpl", size: 449, mode: os.FileMode(420), modTime: time.Unix(1441899662, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _homepageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x4d\x6f\xd5\x30\x10\x3c\xbf\xfe\x8a\xc5\x67\x1a\x8b\x4a\x48\xa8\x72\x7c\xa1\x70\x85\xc3\x43\x88\xe3\x26\xde\xc6\xd6\xf3\x57\x6d\x07\x1a\x55\xfd\xef\xd8\x49\xa0\x8f\x16\x6e\x9c\x9c\xcc\x7a\x76\x66\x77\x12\xf1\xea\xe6\xd3\xfb\xe3\xb7\xcf\x1f\x40\x17\x67\xe5\x85\x68\x07\x58\xf4\x53\xcf\xc8\xb3\x06\x10\x2a\x79\x71\x10\x8e\x0a\xc2\xa8\x31\x65\x2a\x3d\xfb\x72\xfc\x78\xf9\x8e\x35\xbc\x98\x62\x49\x4e\x21\x91\x25\xcc\x24\xf8\x06\xd4\x8a\x35\xfe\x04\x15\xee\x59\x2e\x8b\xa5\xac\x89\x0a\x03\x9d\xe8\xb6\x67\x7c\x0c\xce\x05\xdf\x8d\x39\x37\x11\xbe\xa9\x88\x21\xa8\xa5\x51\x95\xf9\x0e\x46\xf5\x2c\xe2\x44\x4d\xe5\x20\xf4\x9b\x73\x8d\xfa\xd6\xc0\x28\xbf\x92\xad\x9d\xe8\x35\x64\x22\x10\xb8\x77\xd7\xa5\xc4\x7c\xcd\xf9\x64\x8a\x9e\x87\xae\xde\xa8\x7a\x8a\xf2\x69\x19\xec\x4c\xfc\x77\x23\x26\x55\x18\x05\x47\x09\xb7\x21\x81\xab\x30\x18\x5f\x1f\x1d\x16\x53\xcd\x09\x1e\x57\x99\xea\xa6\x9d\xd5\xc4\x95\xbc\x09\x3f\xbc\x0d\xa8\x00\x95\x4a\x94\x73\xf5\x72\xb5\x15\xa3\xbc\x33\xde\xcc\x90\xe7\x41\x05\x87\xc6\x83\xc7\xe6\x8c\xee\xaf\x41\x34\x79\xa9\xfc\xe5\x14\x86\xd9\x58\xf5\xb6\xbb\x1b\xc2\x7d\xe7\xea\x28\x6b\x65\x57\x6a\x4d\x96\x30\xa7\xba\xb5\x18\x5e\xd0\xcf\xe6\xff\x37\x69\x48\xe8\x47\x7d\x4e\x73\x98\x0b\xa5\x97\x9c\xa3\x26\x0f\x4f\x44\x65\x72\x01\xf5\x6c\x3a\x30\x19\xda\xf5\xc3\x1f\xab\x6d\x9b\xfd\xe5\xa5\xd3\x94\xc2\x69\xc6\x18\xd7\x35\xff\x65\xc4\xa7\xbb\x7c\xb3\xc2\xe4\x7f\x68\xd2\x52\x5b\x07\xd9\x33\xe2\x7b\x48\x0f\x0f\x85\x5c\xb4\x58\x08\x58\x4d\xf2\xe4\x88\x41\xf7\xf8\xf8\xac\x82\x1e\xed\x92\x4d\xde\x6b\x3b\x5b\xf0\xed\xfb\xab\x99\xae\x3f\xc3\xcf\x00\x00\x00\xff\xff\x2a\x14\x0f\x14\x1d\x03\x00\x00")

func homepageTmplBytes() ([]byte, error) {
	return bindataRead(
		_homepageTmpl,
		"homepage.tmpl",
	)
}

func homepageTmpl() (*asset, error) {
	bytes, err := homepageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "homepage.tmpl", size: 797, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _releaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x6f\xdb\x38\x10\x3d\x3b\xbf\x82\xcb\x35\x16\xf2\xc1\x14\x72\x5b\x6c\x24\x01\xf9\xd8\xa6\x28\x8a\x38\xc8\xc7\xa1\xa7\x80\x96\xc6\x12\x13\x8a\x54\x49\x2a\x89\x20\xf8\xbf\x77\x28\xca\xb2\x9d\x06\xbd\x98\xf4\x9b\x99\x37\xa3\xc7\x47\x26\x7f\x5d\xad\x2e\x1f\x7e\xdc\xfe\x4f\x2a\x57\xcb\xec\x24\xf1\x0b\x91\x5c\x95\x29\x05\x45\x3d\x00\xbc\xc8\x4e\x66\x49\x0d\x8e\x93\xbc\xe2\xc6\x82\x4b\xe9\xe3\xc3\x97\xe5\xbf\xd4\xe3\x52\xa8\x17\x62\x40\xa6\xd4\xba\x4e\x82\xad\x00\x1c\x25\x95\x81\x4d\x4a\xe3\x5c\xd7\xb5\x56\x2c\xb7\x76\xc8\xb5\xb9\x11\x8d\x23\xd6\xe4\x18\x7b\xfe\xd9\x82\xe9\x58\x2d\x14\x7b\xc6\x70\x12\x87\xa8\xcf\x73\xc2\x49\xc8\x4a\x8d\xb4\xc0\x2d\x90\x25\xe9\x7b\x76\xc3\x6b\xd8\x6e\x93\x38\x04\x4f\x92\x38\x4c\x96\xac\x75\xd1\xf9\xa2\x42\xbc\x12\x51\xa4\xb4\xe1\x25\xf8\x6e\xb3\xa4\x3a\xcd\xa6\x3a\x92\xd8\x9a\x4b\xe9\x81\x0b\xc3\x55\x5e\x79\xaa\x00\x21\xd3\xe9\x90\xef\x19\x72\xc9\xad\x4d\xe9\xba\x15\xb2\x58\x0a\xb5\xd1\x03\xd5\x2c\x69\x86\x05\x3f\xc1\x19\xad\xca\xec\x5a\x63\x75\xd8\x22\x73\xc3\xd5\xd0\xba\xd4\xaf\x60\xac\xd0\x28\x5c\xab\x5e\x94\x7e\x53\x98\x85\xc1\x40\x11\x37\x9f\x52\x3d\x36\x05\x77\x50\x7c\xc6\xd7\x0e\xa1\x25\x77\x7f\xe0\x4b\x62\x1c\x7b\xd8\x38\xbe\xf6\xc2\xf8\x90\x33\x63\x0f\x57\x65\xd7\xab\xd5\x3d\xaa\x56\x1d\x22\xe7\x77\x97\x5f\x8f\xb1\xef\x78\x8c\xc7\xc8\xaa\x61\x13\x80\x9b\xc0\xd8\xf7\x28\x5e\x09\x84\xdd\x85\xa3\xb1\xdb\xed\x87\x86\x85\x97\x78\x75\x3f\x9c\x54\x71\x04\x9e\x9b\xa0\xfa\x07\xd8\x77\xfe\x08\x0f\x9b\x59\xc2\x47\x1f\x4d\x59\x34\xbb\x42\x11\xa4\xe6\x28\x17\x1f\xd3\x77\x85\x07\x33\x82\x2a\x86\xb9\x10\xda\x69\x32\xd9\x63\xa3\xb5\x03\x33\x9e\xea\xae\x41\x4c\xb3\x4a\xd7\xe0\xad\xb3\x23\xfe\x27\xd7\x4d\x77\x76\xab\xdf\xc0\x40\x41\xd6\x1d\x99\x92\x2b\xe7\x1a\xfb\x5f\x1c\x97\xc2\x55\xed\x9a\xa1\xc7\xd1\xe7\x05\xd8\x97\x6e\x2d\x5b\x88\x27\xdb\xd2\xbd\x83\x47\xd2\xdd\x59\x4d\xeb\xd1\x85\x40\xa2\x46\x2b\x50\xce\xc6\x35\x0e\xa3\xdc\xb8\xfc\x76\x3d\xa6\xdd\x6c\x1e\x6d\x5a\x95\x3b\x74\x5c\xb4\xe8\xfd\xd4\xaf\xdc\x90\x79\xb0\xcd\xb9\x23\x29\x99\x47\xf4\xef\xbd\x8b\x16\x67\x3e\x67\xce\x4a\x70\xdf\xee\x57\x37\x91\x17\xf6\xc2\x3b\xdd\xff\x43\x75\x17\x83\xa2\xcc\xb6\x79\x0e\xd6\xee\xb9\x0d\xd8\x40\x1f\x1a\xb4\xcd\x83\xa8\x01\xd9\xc7\xf9\x5a\x25\xde\x7d\x0e\x0b\x9d\x9e\x1c\x46\x43\xab\x90\xbf\x31\xba\xbe\xd1\x6f\x58\x10\x2a\xd9\x08\x44\xbb\xa4\x69\x62\xe6\xe0\xdd\x45\x63\x18\xa3\x63\x18\x3f\x62\x7f\xb5\x16\x21\xc9\xf7\x2b\xf5\xd3\x88\x8e\x4c\xdb\xf1\x0b\xc0\x18\x6d\x3e\x9d\x1f\xb9\x50\x7b\x76\x70\xbf\x17\xac\x12\x05\x44\x13\x83\x5f\x87\xdf\x03\xc9\xfb\xde\x41\xdd\x48\x9c\x91\x50\xae\xb8\xec\xac\xb0\x94\x30\x34\x59\x12\x87\xf7\x07\x1f\x91\xe1\x01\xfd\x15\x00\x00\xff\xff\x1d\xb2\x11\x8f\x51\x05\x00\x00")

func releaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_releaseTmpl,
		"release.tmpl",
	)
}

func releaseTmpl() (*asset, error) {
	bytes, err := releaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "release.tmpl", size: 1361, mode: os.FileMode(420), modTime: time.Unix(1441899413, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"analysis.tmpl": analysisTmpl,
	"forkme.tmpl": forkmeTmpl,
	"homepage.tmpl": homepageTmpl,
	"release.tmpl": releaseTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"analysis.tmpl": &bintree{analysisTmpl, map[string]*bintree{
	}},
	"forkme.tmpl": &bintree{forkmeTmpl, map[string]*bintree{
	}},
	"homepage.tmpl": &bintree{homepageTmpl, map[string]*bintree{
	}},
	"release.tmpl": &bintree{releaseTmpl, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

