// Code generated by go-bindata.
// sources:
// bindata.go
// common.css
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1441776394, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _commonCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x41\x6f\xa3\x30\x10\x85\xef\xf9\x15\xa3\xe4\x0a\xab\x84\x5c\x56\x70\x5a\xed\xa1\x3d\xb4\xa7\xaa\x3f\x60\x82\x07\x18\xd5\x78\x90\xed\x84\xa4\x55\xfe\x7b\xc7\x04\xa2\x28\xe2\x62\xfc\xde\x7c\xf3\x9e\x0f\x62\x2e\xf0\x03\xb5\x58\xf1\x25\x6c\xf6\x45\xfa\x2a\x68\xc4\xc5\xbc\xc1\x9e\xed\xa5\x84\xf5\xdb\xb1\x66\x83\xf0\xe2\xd1\x19\x5a\x67\xcb\xff\x07\xba\x00\x9f\x8e\x6b\x49\xb7\xaf\x64\x4f\x14\xb9\xc6\xec\x9f\x67\xb4\x59\x50\x35\x0f\xe4\xb9\x99\x71\x81\xbf\xa9\xdc\xed\x87\x73\x05\x3d\xfa\x96\x5d\x09\xdb\x0a\x06\x34\x86\x5d\x3b\x9d\xaf\xab\xcd\x80\x2d\x69\x9e\xbb\x01\xf0\x18\xa5\x82\x91\x4d\xec\x4a\xf8\xbb\xdd\xa6\xf1\xeb\xaa\x2b\xd4\x34\x51\x47\xe2\xb6\x8b\x25\x38\xf1\x3d\xda\x67\x5e\x8a\xb6\x38\x97\x3a\xef\xe2\xb0\x96\x7b\x8b\xff\xe2\x82\x58\x2d\xd0\x8b\x93\x30\x60\x4d\x8f\x79\x61\x57\xdc\x36\x0e\x3e\x81\x66\x7a\x6e\xa9\xd1\x9d\x05\xf5\x49\x5a\xfd\x09\x52\x6b\x65\xd5\xe5\x44\xbe\xb1\x32\x96\xd0\xb1\x31\xe4\xa6\x4e\xad\x48\x6b\x29\x83\x4d\x1c\x39\x46\xf2\x7a\x6a\x74\xcd\x41\xe4\x2b\x65\xb3\x82\xca\x4a\xc4\xe5\x61\x72\x7f\xeb\x34\xf3\x1f\xdd\xb3\x21\xca\xa0\xf2\x2d\x99\xea\x22\x8a\x7d\x52\x77\x69\x38\xd2\x39\xe6\x68\xb9\xd5\xb7\x9c\xa0\x69\xe0\x37\x00\x00\xff\xff\xa3\x92\x2e\x91\xf4\x01\x00\x00")

func commonCssBytes() ([]byte, error) {
	return bindataRead(
		_commonCss,
		"common.css",
	)
}

func commonCss() (*asset, error) {
	bytes, err := commonCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.css", size: 500, mode: os.FileMode(420), modTime: time.Unix(1441714924, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"common.css": commonCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{
	}},
	"common.css": &bintree{commonCss, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

